openapi: 3.0.0
info:
    title: Online Learning Platform API
    version: 1.0.0
    description: API for managing courses, folders, and user enrollments in an online learning platform.

servers:
    - url: http://localhost:3000/api
      description: Local development server

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        User:
            type: object
            properties:
                _id:
                    type: string
                email:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                role:
                    type: string
                    enum: [student, teacher, admin]
                phone:
                    type: string
                    description: Optional phone number
                courses:
                    type: array
                    items:
                        type: string
        UserUpdate:
            type: object
            properties:
                email:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                password:
                    type: string
                phone:
                    type: string
                    description: Optional phone number
        Course:
            type: object
            properties:
                _id:
                    type: string
                name:
                    type: string
                description:
                    type: string
                teacher:
                    type: string
                code:
                    type: string
                students:
                    type: array
                    items:
                        type: string
                tasks:
                    type: array
                    items:
                        type: string
        CourseCreate:
            type: object
            required:
                - name
                - description
            properties:
                name:
                    type: string
                description:
                    type: string
        CourseEnrollByCode:
            type: object
            required:
                - code
            properties:
                code:
                    type: string
        CourseEnrollByEmail:
            type: object
            required:
                - courseId
                - email
            properties:
                courseId:
                    type: string
                email:
                    type: string
        Folder:
            type: object
            properties:
                _id:
                    type: string
                title:
                    type: string
                materials:
                    type: array
                    items:
                        type: string
                createdAt:
                    type: string
                updatedAt:
                    type: string
        Material:
            type: object
            properties:
                _id:
                    type: string
                title:
                    type: string
                description:
                    type: string
                filePath:
                    type: string
                createdAt:
                    type: string
                updatedAt:
                    type: string
        Task:
            type: object
            properties:
                _id:
                    type: string
                title:
                    type: string
                description:
                    type: string
                courseTasks:
                    type: array
                    items:
                        type: object
                        properties:
                            course:
                                type: string
                            dueDate:
                                type: string
                                format: date-time
                            assingedAt:
                                type: string
                                format: date-time
                submissions:
                    type: array
                    items:
                        type: string
                webglUrl:
                    type: string
                    nullable: true
                score:
                    type: number
                    default: 100
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        TaskCreate:
            type: object
            required:
                - title
                - description
            properties:
                title:
                    type: string
                    example: 'WebGL 3D Scene Assignment'
                description:
                    type: string
                    example: 'Create a 3D scene using WebGL with lighting and textures'
                webglUrl:
                    type: string
                    example: 'https://example.com/webgl-app'
                    description: Optional WebGL application URL
                score:
                    type: number
                    example: 100
                    description: Maximum score for the task (default 100)

        TaskUpdate:
            type: object
            properties:
                title:
                    type: string
                    example: 'Updated WebGL Assignment'
                description:
                    type: string
                    example: 'Updated description for the 3D scene assignment'
                webglUrl:
                    type: string
                    example: 'https://example.com/updated-webgl-app'
                score:
                    type: number
                    example: 150

security:
    - bearerAuth: []

tags:
    - name: Auth
      description: Authentication and authorization
    - name: Users
      description: User management and Retrieval
    - name: Courses
      description: Course management and enrollment
    - name: Tasks
      description: Task management and assignment

paths:
    /auth/register:
        post:
            summary: Register a new user
            tags: [Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - firstName
                                - lastName
                                - email
                                - password
                            properties:
                                firstName:
                                    type: string
                                    example: John
                                lastName:
                                    type: string
                                    example: Doe
                                email:
                                    type: string
                                    example: john@example.com
                                password:
                                    type: string
                                    example: strongpassword
                                phone:
                                    type: String,
                                    example: '+1234567890'
                                    description: Optional phone number
            responses:
                201:
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: User created successfully
                400:
                    description: User already exists or invalid input
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: User already exists

    /auth/login:
        post:
            summary: Log in an existing user
            tags: [Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                            properties:
                                email:
                                    type: string
                                    example: john@example.com
                                password:
                                    type: string
                                    example: strongpassword
            responses:
                200:
                    description: Logged in successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                                    user:
                                        type: object
                                        properties:
                                            id:
                                                type: string
                                            email:
                                                type: string
                                            firstName:
                                                type: string
                                            lastName:
                                                type: string
                                            role:
                                                type: string
                                                enum: [student, teacher, admin]
                400:
                    description: Invalid credentials or Google login required
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: Invalid credentials

    /auth/logout:
        post:
            summary: Log out the current user
            tags: [Auth]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Logged out successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Logged out successfully
                401:
                    description: No token provided or token invalidated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: No token provided
                500:
                    description: Error logging out
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Error logging out

    /users/students:
        get:
            summary: Get all students
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of students
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden

    /users/teachers:
        get:
            summary: Get all teachers
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of teachers
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden

    /users/me:
        get:
            summary: Get current user profile
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: User profile
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                401:
                    description: Unauthorized
        put:
            summary: Update current user profile
            tags: [Users]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            responses:
                202:
                    description: User updated successfully
                400:
                    description: Bad request
                401:
                    description: Unauthorized

    /users/{id}:
        get:
            summary: Get user by ID
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: User ID
            responses:
                200:
                    description: User data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: User not found
        put:
            summary: Update user by ID
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: User ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            responses:
                202:
                    description: User updated successfully
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: User not found
        delete:
            summary: Delete user by ID
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: User ID
            responses:
                204:
                    description: User deleted successfully
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: User not found

    /courses:
        get:
            summary: Get all courses
            tags: [Courses]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of courses
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Course'
                401:
                    description: Unauthorized
        post:
            summary: Create a new course
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseCreate'
            responses:
                201:
                    description: Course created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course'
                400:
                    description: Bad request
                401:
                    description: Unauthorized

    /courses/me:
        get:
            summary: Get courses for the authenticated user
            tags: [Courses]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of user's courses
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Course'
                401:
                    description: Unauthorized

    /courses/{id}:
        get:
            summary: Get course by ID
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Course ID
            responses:
                200:
                    description: Course data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course'
                401:
                    description: Unauthorized
                404:
                    description: Course not found
        put:
            summary: Update a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Course ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseCreate'
            responses:
                200:
                    description: Course updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course'
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course not found
        delete:
            summary: Delete a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Course ID
            responses:
                200:
                    description: Course removed
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course not found

    /courses/enroll:
        post:
            summary: Enroll in a course by code (student only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseEnrollByCode'
            responses:
                200:
                    description: User enrolled in course successfully
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                404:
                    description: Course not found

    /courses/unenroll:
        post:
            summary: Unenroll from a course by code (student only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseEnrollByCode'
            responses:
                200:
                    description: User unenrolled from course successfully
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                404:
                    description: Course not found

    /courses/enroll-email:
        post:
            summary: Enroll a student by email (teacher only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseEnrollByEmail'
            responses:
                200:
                    description: Student enrolled in course successfully
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or student not found

    /courses/unenroll-email:
        post:
            summary: Unenroll a student by email (teacher only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseEnrollByEmail'
            responses:
                200:
                    description: Student unenrolled from course successfully
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or student not found

    /courses/{courseId}/folders:
        post:
            summary: Create a new folder in a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - title
                            properties:
                                title:
                                    type: string
                                    example: 'Week 1'
            responses:
                201:
                    description: Folder created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Folder'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course not found
        get:
            summary: Get all folders for a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
            responses:
                200:
                    description: List of folders
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    folders:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Folder'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course not found

    /courses/{courseId}/folders/{folderId}:
        get:
            summary: Get a folder by ID
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
            responses:
                200:
                    description: Folder data
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    folder:
                                        $ref: '#/components/schemas/Folder'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or folder not found
        put:
            summary: Update a folder in a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    example: 'Updated Folder Title'
            responses:
                200:
                    description: Folder updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    folder:
                                        $ref: '#/components/schemas/Folder'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or folder not found
        delete:
            summary: Delete a folder from a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
            responses:
                200:
                    description: Folder deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or folder not found

    /courses/{courseId}/folders/{folderId}/materials:
        post:
            summary: Upload material to a folder in a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                description:
                                    type: string
                                file:
                                    type: string
                                    format: binary
            responses:
                201:
                    description: Material uploaded successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    material:
                                        $ref: '#/components/schemas/Material'
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or folder not found
        get:
            summary: Get all materials in a folder
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
            responses:
                200:
                    description: List of materials
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    materials:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Material'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Course or folder not found

    /courses/{courseId}/folders/{folderId}/materials/{materialId}:
        get:
            summary: Get a material by ID
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
                - in: path
                  name: materialId
                  schema:
                      type: string
                  required: true
                  description: The ID of the material
            responses:
                200:
                    description: Material data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Material'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Material not found
        delete:
            summary: Delete a material from a folder
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
                - in: path
                  name: materialId
                  schema:
                      type: string
                  required: true
                  description: The ID of the material
            responses:
                200:
                    description: Material deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Material not found

    /courses/{courseId}/folders/{folderId}/materials/{materialId}/download:
        get:
            summary: Download a material file
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: The ID of the course
                - in: path
                  name: folderId
                  schema:
                      type: string
                  required: true
                  description: The ID of the folder
                - in: path
                  name: materialId
                  schema:
                      type: string
                  required: true
                  description: The ID of the material
            responses:
                200:
                    description: File download
                401:
                    description: Unauthorized
                403:
                    description: Forbidden
                404:
                    description: Material not found

    /tasks:
        get:
            summary: Get all tasks (Teachers only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of all tasks
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Tasks retrieved successfully
                                    count:
                                        type: number
                                    tasks:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Task'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Teachers only
        post:
            summary: Create a new task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TaskCreate'
            responses:
                201:
                    description: Task created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Task created successfully
                                    task:
                                        $ref: '#/components/schemas/Task'
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Admin only

    /tasks/{id}:
        get:
            summary: Get task by ID (Teachers only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Task ID
            responses:
                200:
                    description: Task details
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Task retrieved successfully
                                    task:
                                        $ref: '#/components/schemas/Task'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Teachers only
                404:
                    description: Task not found
        put:
            summary: Update task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Task ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TaskUpdate'
            responses:
                200:
                    description: Task updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Task updated successfully
                                    task:
                                        $ref: '#/components/schemas/Task'
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Admin only
                404:
                    description: Task not found
        delete:
            summary: Delete task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Task ID
            responses:
                200:
                    description: Task deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Task deleted successfully
                                    taskId:
                                        type: string
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Admin only
                404:
                    description: Task not found

    /tasks/{id}/assign:
        post:
            summary: Assign task to course with due date (Teacher only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Task ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - courseId
                                - dueDate
                            properties:
                                courseId:
                                    type: string
                                    example: '675a1b2c3d4e5f6789012345'
                                dueDate:
                                    type: string
                                    format: date-time
                                    example: '2024-12-25T23:59:59.000Z'
            responses:
                200:
                    description: Task assigned successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Task assigned to course successfully
                                    task:
                                        $ref: '#/components/schemas/Task'
                                    course:
                                        $ref: '#/components/schemas/Course'
                400:
                    description: Bad request - Task already assigned or invalid data
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Not authorized for this course
                404:
                    description: Task or course not found

    /tasks/{id}/unassign:
        delete:
            summary: Unassign task from course (Teacher only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Task ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - courseId
                            properties:
                                courseId:
                                    type: string
                                    example: '675a1b2c3d4e5f6789012345'
            responses:
                200:
                    description: Task unassigned successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: Task unassigned from course successfully
                400:
                    description: Bad request - Task not assigned to course
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Not authorized for this course
                404:
                    description: Task or course not found

    /tasks/{id}/assign/{courseId}:
        put:
            summary: Update task due date for specific course (Teacher only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: Task ID
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: Course ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - dueDate
                            properties:
                                dueDate:
                                    type: string
                                    format: date-time
                                    example: '2024-12-30T23:59:59.000Z'
            responses:
                200:
                    description: Task assignment updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    message:
                                        type: string
                                        example: Task assignment updated successfully
                                    assingment:
                                        type: object
                                        properties:
                                            course:
                                                type: string
                                            dueDate:
                                                type: string
                                                format: date-time
                                            assingedAt:
                                                type: string
                                                format: date-time
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Not authorized for this course
                404:
                    description: Task not found or not assigned to course

    /courses/{courseId}/tasks:
        get:
            summary: Get all tasks assigned to a course
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  schema:
                      type: string
                  required: true
                  description: Course ID
            responses:
                200:
                    description: List of course tasks with due dates
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        example: true
                                    count:
                                        type: number
                                    tasks:
                                        type: array
                                        items:
                                            allOf:
                                                - $ref: '#/components/schemas/Task'
                                                - type: object
                                                  properties:
                                                      dueDate:
                                                          type: string
                                                          format: date-time
                                                          description: Course-specific due date
                                                      assignedAt:
                                                          type: string
                                                          format: date-time
                                                          description: When task was assigned to this course
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Not enrolled in course
                404:
                    description: Course not found
