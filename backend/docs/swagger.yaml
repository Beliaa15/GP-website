openapi: 3.0.0
info:
    title: Educational Platform API
    version: 2.0.0
    description: Comprehensive API for managing courses, tasks, materials, submissions, and WebGL content in an educational platform.

servers:
    - url: http://localhost:3000/api
      description: Local development server
    - url: https://your-production-domain.com/api
      description: Production server

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        User:
            type: object
            properties:
                _id:
                    type: string
                    example: '507f1f77bcf86cd799439011'
                email:
                    type: string
                    format: email
                    example: 'john.doe@example.com'
                firstName:
                    type: string
                    example: 'John'
                lastName:
                    type: string
                    example: 'Doe'
                role:
                    type: string
                    enum: [student, teacher, admin]
                    example: 'student'
                phone:
                    type: string
                    example: '+1234567890'
                    description: Optional phone number
                googleId:
                    type: string
                    description: Google OAuth ID (optional)
                courses:
                    type: array
                    items:
                        type: string
                    description: Array of course IDs the user is enrolled in
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        UserCreate:
            type: object
            required:
                - firstName
                - lastName
                - email
                - password
            properties:
                firstName:
                    type: string
                    minLength: 2
                    maxLength: 50
                    example: 'John'
                lastName:
                    type: string
                    minLength: 2
                    maxLength: 50
                    example: 'Doe'
                email:
                    type: string
                    format: email
                    example: 'john.doe@example.com'
                password:
                    type: string
                    minLength: 6
                    example: 'securePassword123'
                phone:
                    type: string
                    pattern: '^\+?[1-9]\d{1,14}$'
                    example: '+1234567890'

        UserUpdate:
            type: object
            properties:
                firstName:
                    type: string
                    minLength: 2
                    maxLength: 50
                lastName:
                    type: string
                    minLength: 2
                    maxLength: 50
                email:
                    type: string
                    format: email
                password:
                    type: string
                    minLength: 6
                phone:
                    type: string
                    pattern: '^\+?[1-9]\d{1,14}$'

        Course:
            type: object
            properties:
                _id:
                    type: string
                    example: '507f1f77bcf86cd799439011'
                name:
                    type: string
                    example: 'Introduction to Computer Graphics'
                description:
                    type: string
                    example: 'Learn the fundamentals of computer graphics and WebGL'
                teacher:
                    type: string
                    example: '507f1f77bcf86cd799439012'
                    description: Teacher user ID
                code:
                    type: string
                    example: 'CS101-2024'
                    description: Unique course enrollment code
                students:
                    type: array
                    items:
                        type: string
                    description: Array of student user IDs
                tasks:
                    type: array
                    items:
                        type: string
                    description: Array of task IDs assigned to this course
                folders:
                    type: array
                    items:
                        type: string
                    description: Array of folder IDs containing course materials
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        CourseCreate:
            type: object
            required:
                - name
                - description
            properties:
                name:
                    type: string
                    minLength: 3
                    maxLength: 100
                    example: 'Advanced WebGL Programming'
                description:
                    type: string
                    minLength: 10
                    maxLength: 500
                    example: 'Deep dive into advanced WebGL techniques and 3D graphics programming'

        Folder:
            type: object
            properties:
                _id:
                    type: string
                    example: '507f1f77bcf86cd799439013'
                title:
                    type: string
                    example: 'Week 1 - Introduction'
                materials:
                    type: array
                    items:
                        type: string
                    description: Array of material IDs in this folder
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        Material:
            type: object
            properties:
                _id:
                    type: string
                    example: '507f1f77bcf86cd799439014'
                title:
                    type: string
                    example: 'Lecture 1 Notes'
                description:
                    type: string
                    example: 'Introduction to computer graphics concepts'
                filePath:
                    type: string
                    example: '/uploads/materials/507f1f77bcf86cd799439014/lecture1.pdf'
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        Task:
            type: object
            properties:
                _id:
                    type: string
                    example: '507f1f77bcf86cd799439015'
                title:
                    type: string
                    example: '3D Scene Creation'
                description:
                    type: string
                    example: 'Create an interactive 3D scene using WebGL'
                courseTasks:
                    type: array
                    items:
                        type: object
                        properties:
                            course:
                                type: string
                                description: Course ID
                            dueDate:
                                type: string
                                format: date-time
                            assignedAt:
                                type: string
                                format: date-time
                submissions:
                    type: array
                    items:
                        type: string
                    description: Array of submission IDs for this task
                webglData:
                    type: object
                    properties:
                        buildFolderPath:
                            type: string
                            example: '/uploads/webgl/507f1f77bcf86cd799439015'
                        loader:
                            type: string
                            example: '/uploads/webgl/507f1f77bcf86cd799439015/Build.loader.js'
                        data:
                            type: string
                            example: '/uploads/webgl/507f1f77bcf86cd799439015/Build.data'
                        framework:
                            type: string
                            example: '/uploads/webgl/507f1f77bcf86cd799439015/Build.framework.js'
                        wasm:
                            type: string
                            example: '/uploads/webgl/507f1f77bcf86cd799439015/Build.wasm'
                score:
                    type: number
                    default: 100
                    example: 100
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        TaskCreate:
            type: object
            required:
                - title
                - description
            properties:
                title:
                    type: string
                    example: 'WebGL Lighting Assignment'
                description:
                    type: string
                    example: 'Implement Phong lighting model in WebGL'
                score:
                    type: number
                    default: 100
                    example: 100

        TaskUpdate:
            type: object
            properties:
                title:
                    type: string
                description:
                    type: string
                webglUrl:
                    type: string
                score:
                    type: number

        StudentSubmission:
            type: object
            properties:
                _id:
                    type: string
                    example: '507f1f77bcf86cd799439016'
                student:
                    type: string
                    description: Student user ID
                task:
                    type: string
                    description: Task ID
                grade:
                    type: number
                    nullable: true
                    example: 85
                status:
                    type: string
                    enum: [submitted, late, graded]
                    example: 'submitted'
                submittedAt:
                    type: string
                    format: date-time
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time

        WebGLUploadResponse:
            type: object
            properties:
                success:
                    type: boolean
                    example: true
                message:
                    type: string
                    example: 'Files uploaded successfully'
                task:
                    $ref: '#/components/schemas/Task'
                filesUploaded:
                    type: array
                    items:
                        type: object
                        properties:
                            originalName:
                                type: string
                                example: 'Build.loader.js'
                            size:
                                type: number
                                example: 1024000
                            path:
                                type: string
                                example: '/uploads/webgl/507f1f77bcf86cd799439015/Build.loader.js'

        WebGLInfo:
            type: object
            properties:
                success:
                    type: boolean
                    example: true
                webglData:
                    type: object
                    properties:
                        hasFiles:
                            type: boolean
                            example: true
                        buildFolderPath:
                            type: string
                            example: '/uploads/webgl/507f1f77bcf86cd799439015'
                        files:
                            type: object
                            properties:
                                loader:
                                    type: string
                                    example: 'Build.loader.js'
                                data:
                                    type: string
                                    example: 'Build.data'
                                framework:
                                    type: string
                                    example: 'Build.framework.js'
                                wasm:
                                    type: string
                                    example: 'Build.wasm'

        Error:
            type: object
            properties:
                error:
                    type: string
                    example: 'Invalid credentials'
                message:
                    type: string
                    example: 'The provided credentials are invalid'

security:
    - bearerAuth: []

tags:
    - name: Auth
      description: Authentication and authorization operations
    - name: Users
      description: User management and profile operations
    - name: Courses
      description: Course management, enrollment, and materials
    - name: Tasks
      description: Task management, assignment, and WebGL content
    - name: Submissions
      description: Student submission management and grading
    - name: Materials
      description: Course material management and file operations

paths:
    # Authentication Routes
    /auth/register:
        post:
            summary: Register a new user
            tags: [Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserCreate'
            responses:
                201:
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User created successfully'
                400:
                    description: User already exists or validation error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /auth/login:
        post:
            summary: Login user
            tags: [Auth]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
            responses:
                200:
                    description: Login successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                    user:
                                        $ref: '#/components/schemas/User'
                400:
                    description: Invalid credentials
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /auth/logout:
        post:
            summary: Logout user
            tags: [Auth]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Logout successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Logged out successfully'

    # User Routes
    /users:
        get:
            summary: Get all users (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                401:
                    description: Unauthorized
                403:
                    description: Forbidden - Admin access required

    /users/students:
        get:
            summary: Get all students (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of students
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'

    /users/teachers:
        get:
            summary: Get all teachers (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of teachers
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'

    /users/me:
        get:
            summary: Get current user profile
            tags: [Users]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: User profile
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
        put:
            summary: Update current user profile
            tags: [Users]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            responses:
                202:
                    description: User updated successfully

    /users/{id}:
        get:
            summary: Get user by ID (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: User data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
        put:
            summary: Update user by ID (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            responses:
                202:
                    description: User updated successfully
        delete:
            summary: Delete user and associated data (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    description: User deleted successfully

    /users/{id}/role:
        put:
            summary: Update user role (Admin only)
            tags: [Users]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - role
                            properties:
                                role:
                                    type: string
                                    enum: [student, teacher, admin]
            responses:
                200:
                    description: User role updated successfully

    # Course Routes
    /courses:
        get:
            summary: Get all courses (Teachers/Admin only)
            tags: [Courses]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of courses
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Course'
        post:
            summary: Create a new course (Teachers/Admin only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseCreate'
            responses:
                201:
                    description: Course created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course'

    /courses/me:
        get:
            summary: Get user's courses
            tags: [Courses]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of user's courses
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Course'

    /courses/enroll:
        post:
            summary: Enroll in course by code (Students only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - code
                            properties:
                                code:
                                    type: string
                                    example: 'CS101-2024'
            responses:
                200:
                    description: Successfully enrolled in course

    /courses/unenroll:
        post:
            summary: Unenroll from course by code (Students only)
            tags: [Courses]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - code
                            properties:
                                code:
                                    type: string
            responses:
                200:
                    description: Successfully unenrolled from course

    /courses/{id}:
        get:
            summary: Get course by ID
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Course data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course'
        put:
            summary: Update course (Teacher/Admin only)
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseCreate'
            responses:
                200:
                    description: Course updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course'
        delete:
            summary: Delete course and associated data (Teacher/Admin only)
            tags: [Courses]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Course deleted successfully

    # Task Routes
    /tasks:
        get:
            summary: Get all tasks (Teachers/Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            responses:
                200:
                    description: List of tasks
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    count:
                                        type: number
                                    tasks:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Task'
        post:
            summary: Create a new task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TaskCreate'
            responses:
                201:
                    description: Task created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    task:
                                        $ref: '#/components/schemas/Task'

    /tasks/{id}:
        get:
            summary: Get task by ID (Teachers/Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Task data
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    task:
                                        $ref: '#/components/schemas/Task'
        put:
            summary: Update task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TaskUpdate'
            responses:
                200:
                    description: Task updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    task:
                                        $ref: '#/components/schemas/Task'
        delete:
            summary: Delete task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Task deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    taskId:
                                        type: string

    /tasks/{id}/upload:
        post:
            summary: Upload WebGL files for a task (Admin only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                  description: Task ID
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            required:
                                - webglFiles
                            properties:
                                webglFiles:
                                    type: array
                                    items:
                                        type: string
                                        format: binary
                                    description: WebGL build files (.js, .data, .wasm files)
                                    maxItems: 4
            responses:
                200:
                    description: Files uploaded successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WebGLUploadResponse'
                400:
                    description: Missing required files or invalid file types
                404:
                    description: Task not found

    /tasks/{id}/webgl-info:
        get:
            summary: Get WebGL build information for a task
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                  description: Task ID
            responses:
                200:
                    description: WebGL build information
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WebGLInfo'
                404:
                    description: Task not found or no WebGL build available

    /tasks/{id}/webgl-files/{fileType}:
        get:
            summary: Download WebGL build files (public access for Unity)
            tags: [Tasks]
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                  description: Task ID
                - in: path
                  name: fileType
                  required: true
                  schema:
                      type: string
                      enum: [loader, data, framework, wasm]
                  description: Type of WebGL file to download
            responses:
                200:
                    description: WebGL file content
                    content:
                        application/javascript:
                            schema:
                                type: string
                                format: binary
                        application/wasm:
                            schema:
                                type: string
                                format: binary
                        application/octet-stream:
                            schema:
                                type: string
                                format: binary
                404:
                    description: File not found

    /tasks/{id}/assign:
        post:
            summary: Assign task to course (Teachers only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - courseId
                                - dueDate
                            properties:
                                courseId:
                                    type: string
                                dueDate:
                                    type: string
                                    format: date-time
            responses:
                200:
                    description: Task assigned successfully

    /tasks/{id}/unassign:
        delete:
            summary: Unassign task from course (Teachers only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - courseId
                            properties:
                                courseId:
                                    type: string
            responses:
                200:
                    description: Task unassigned successfully

    /tasks/{id}/assign/{courseId}:
        put:
            summary: Update task due date for course (Teachers only)
            tags: [Tasks]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - dueDate
                            properties:
                                dueDate:
                                    type: string
                                    format: date-time
            responses:
                200:
                    description: Due date updated successfully

    # Submission Routes
    /courses/{courseId}/tasks/{taskId}/submit:
        post:
            summary: Submit a task (Students only)
            tags: [Submissions]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: taskId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                grade:
                                    type: number
                                    description: Optional initial grade
            responses:
                201:
                    description: Task submitted successfully
                400:
                    description: Already submitted or not enrolled
                404:
                    description: Course or task not found

        put:
            summary: Update a submission (Students only)
            tags: [Submissions]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: taskId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                grade:
                                    type: number
            responses:
                200:
                    description: Submission updated successfully

    # Folder and Material Routes (keeping existing structure)
    /courses/{courseId}/folders:
        post:
            summary: Create a folder in a course (Teachers only)
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - title
                            properties:
                                title:
                                    type: string
            responses:
                201:
                    description: Folder created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    folder:
                                        $ref: '#/components/schemas/Folder'

        get:
            summary: Get all folders for a course
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: List of folders
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    folders:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Folder'

    /courses/{courseId}/folders/{folderId}:
        get:
            summary: Get folder by ID
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Folder data
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    folder:
                                        $ref: '#/components/schemas/Folder'

        put:
            summary: Update folder (Teachers only)
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
            responses:
                200:
                    description: Folder updated successfully

        delete:
            summary: Delete folder and all materials (Teachers only)
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Folder deleted successfully

    /courses/{courseId}/folders/{folderId}/materials:
        post:
            summary: Upload material to folder (Teachers only)
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            required:
                                - title
                                - file
                            properties:
                                title:
                                    type: string
                                description:
                                    type: string
                                file:
                                    type: string
                                    format: binary
            responses:
                201:
                    description: Material uploaded successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    material:
                                        $ref: '#/components/schemas/Material'

        get:
            summary: Get all materials in folder
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: List of materials
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    materials:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Material'

    /courses/{courseId}/folders/{folderId}/materials/{materialId}:
        get:
            summary: Get material by ID
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: materialId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Material data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Material'

        delete:
            summary: Delete material (Teachers only)
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: materialId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Material deleted successfully

    /courses/{courseId}/folders/{folderId}/materials/{materialId}/download:
        get:
            summary: Download material file
            tags: [Materials]
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: courseId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: folderId
                  required: true
                  schema:
                      type: string
                - in: path
                  name: materialId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: File download
                    content:
                        application/octet-stream:
                            schema:
                                type: string
                                format: binary
